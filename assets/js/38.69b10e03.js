(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{428:function(v,_,t){"use strict";t.r(_);var e=t(45),s=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"单元测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单元测试"}},[v._v("#")]),v._v(" 单元测试")]),v._v(" "),t("h2",{attrs:{id:"导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导航"}},[v._v("#")]),v._v(" 导航")]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95"}},[v._v("什么是单元测试")])]),v._v(" "),t("li",[v._v("单元测试和集成测试有什么区别？")]),v._v(" "),t("li",[v._v("你知道哪些前端单元测试框架？它们有什么优缺点？")]),v._v(" "),t("li",[v._v("如何进行测试驱动开发（"),t("code",[v._v("TDD")]),v._v("）？")]),v._v(" "),t("li",[t("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E5%85%B7%E6%9C%89%E5%8F%AF%E6%B5%8B%E8%AF%95%E6%80%A7%E7%9A%84%E4%BB%A3%E7%A0%81"}},[v._v("如何编写具有可测试性的代码")])]),v._v(" "),t("li",[v._v("如何对异步代码进行单元测试？")]),v._v(" "),t("li",[v._v("如何测试 "),t("code",[v._v("React")]),v._v(" 组件？")]),v._v(" "),t("li",[v._v("如何模拟用户交互行为进行测试？")]),v._v(" "),t("li",[v._v("什么是覆盖率？如何计算代码的覆盖率？")]),v._v(" "),t("li",[v._v("你如何集成单元测试到 "),t("code",[v._v("CI/CD")]),v._v(" 流程中？")]),v._v(" "),t("li",[v._v("什么是 "),t("code",[v._v("Jest")]),v._v(" 的快照测试？")]),v._v(" "),t("li",[t("code",[v._v("Jest")]),v._v(" 如何模拟异步请求？")]),v._v(" "),t("li",[t("code",[v._v("Jest")]),v._v(" 如何使用 "),t("code",[v._v("Mock")]),v._v(" 函数？")]),v._v(" "),t("li",[v._v("如何在 "),t("code",[v._v("Jest")]),v._v(" 中使用 "),t("code",[v._v("ES6")]),v._v(" 模块？")]),v._v(" "),t("li",[t("code",[v._v("Jest")]),v._v(" 可以与哪些持续集成工具集成？")])]),v._v(" "),t("h2",{attrs:{id:"什么是单元测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是单元测试"}},[v._v("#")]),v._v(" 什么是单元测试")]),v._v(" "),t("p",[v._v("单元测试是指对软件系统中最小的可测试单元进行验证和测试的过程。单元测试通常是指对一个模块、函数或方法进行测试，以确保其满足预期的行为和功能。")]),v._v(" "),t("p",[t("strong",[v._v("单元测试优点")]),v._v("：")]),v._v(" "),t("ol",[t("li",[v._v("可以保证代码的质量：单元测试可以检测代码中的潜在问题，如"),t("strong",[v._v("边界条件、错误处理和异常情况")]),v._v("等，从而可以在开发过程中及早地发现和修复问题，减少后期维护成本。")]),v._v(" "),t("li",[v._v("提高代码的可维护性：在开发过程中，单元测试可以帮助开发人员了解代码的工作原理和逻辑，从而更容易进行维护和修改。")]),v._v(" "),t("li",[v._v("加速开发过程：单元测试可以提高代码的质量和可维护性，从而减少后期维护成本，加快开发过程的进度。")]),v._v(" "),t("li",[v._v("支持重构和改进：单元测试可以验证代码的行为是否正确，从而使开发人员更加自信地对代码进行重构和改进。")]),v._v(" "),t("li",[v._v("提高代码的可重复性：单元测试可以确保代码的行为和功能符合预期，从而提高代码的可重复性和稳定性。")])]),v._v(" "),t("p",[t("strong",[v._v("集成测试")]),v._v("：")]),v._v(" "),t("p",[v._v("集成测试（"),t("code",[v._v("Integration Testing")]),v._v("）是软件测试的一种类型，是指将多个模块或组件组合在一起进行测试，以验证它们之间的接口和交互是否正确，以及整个系统是否符合预期的行为和功能。")]),v._v(" "),t("h2",{attrs:{id:"如何编写具有可测试性的代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何编写具有可测试性的代码"}},[v._v("#")]),v._v(" 如何编写具有可测试性的代码")]),v._v(" "),t("p",[v._v("编写具有可测试性的代码是软件开发的一个重要方面，它可以帮助开发人员更容易地编写和执行自动化测试用例，从而提高代码质量和可维护性。下面是一些编写具有可测试性的代码的建议：")]),v._v(" "),t("ol",[t("li",[v._v("设计清晰的接口：将代码分解为独立的模块或组件，并定义清晰的接口和抽象层次结构，以便能够对每个模块或组件进行单独测试。")]),v._v(" "),t("li",[v._v("使用依赖注入：使用依赖注入（"),t("code",[v._v("Dependency Injection")]),v._v("）技术将组件之间的依赖关系解耦，并将依赖关系从代码中分离出来，从而更容易进行测试。")]),v._v(" "),t("li",[v._v("编写可读性高的代码：编写可读性高的代码可以使测试用例更易于编写和维护，并且可以使测试结果更加清晰和明确。")]),v._v(" "),t("li",[v._v("编写短小精悍的方法：编写短小精悍的方法可以使测试用例更加容易编写和维护，从而提高代码的可测试性。")]),v._v(" "),t("li",[v._v("使用模拟对象：使用模拟对象（"),t("code",[v._v("Mock Object")]),v._v("）可以模拟实际的依赖关系，并使测试更容易进行。")]),v._v(" "),t("li",[v._v("遵循设计模式：使用设计模式可以提高代码的可测试性，并将代码分解为更小的单元，以便更容易进行测试。")]),v._v(" "),t("li",[v._v("遵循最佳实践：遵循最佳实践可以提高代码的可测试性，例如，遵循单一职责原则、开闭原则、里氏替换原则等。")])]),v._v(" "),t("p",[v._v("总的来说，编写具有可测试性的代码需要良好的设计和编码实践，以便能够将代码分解为可测试的单元，并使用合适的工具和技术进行测试。")]),v._v(" "),t("h2",{attrs:{id:"什么是覆盖率-如何计算代码的覆盖率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是覆盖率-如何计算代码的覆盖率"}},[v._v("#")]),v._v(" 什么是覆盖率？如何计算代码的覆盖率？")]),v._v(" "),t("p",[v._v("代码覆盖率是指代码中被测试用例覆盖到的代码行数和总代码行数的比例。")]),v._v(" "),t("ul",[t("li",[v._v("在项目根目录下创建一个 "),t("code",[v._v("jest.config.js")]),v._v(" 文件，并添加以下内容，其中 "),t("code",[v._v("collectCoverage")]),v._v(" 表示开启代码覆盖率统计，"),t("code",[v._v("collectCoverageFrom")]),v._v(" 表示统计哪些文件的代码覆盖率。")])]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  collectCoverage"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[v._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("\n  collectCoverageFrom"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[v._v('"src/**/*.{js,jsx,mjs}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),t("ul",[t("li",[v._v("在 "),t("code",[v._v("package.json")]),v._v(" 文件中的 "),t("code",[v._v("scripts")]),v._v(" 中添加以下内容 "),t("code",[v._v('"test": "jest --coverage"')])]),v._v(" "),t("li",[v._v("运行 "),t("code",[v._v("npm test")]),v._v(" 或 "),t("code",[v._v("yarn test")]),v._v(" 命令，"),t("code",[v._v("Jest")]),v._v(" 将会执行测试并输出代码覆盖率报告")])]),v._v(" "),t("p",[t("strong",[v._v("另外")]),v._v("：")]),v._v(" "),t("p",[v._v("计算代码覆盖率可以帮助开发人员了解哪些代码被测试用例覆盖到，哪些代码没有被覆盖到，从而更好地了解代码质量和测试覆盖的程度。这可以帮助开发人员优化代码和测试用例，提高代码可维护性和可测试性。")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("% Stmts")]),v._v("：语句覆盖率，即所有代码语句中被测试用例覆盖到的语句所占比例。")]),v._v(" "),t("li",[t("code",[v._v("% Branch")]),v._v("：分支覆盖率，即所有条件分支语句（如 "),t("code",[v._v("if")]),v._v("）中被测试用例覆盖到的分支所占比例。")]),v._v(" "),t("li",[t("code",[v._v("% Funcs")]),v._v("：函数覆盖率，即所有函数中被测试用例覆盖到的函数所占比例。")]),v._v(" "),t("li",[t("code",[v._v("% Lines")]),v._v("：行覆盖率，即所有代码行中被测试用例覆盖到的行所占比例。")]),v._v(" "),t("li",[t("code",[v._v("Uncovered Line #s")]),v._v("：未覆盖行号，即哪些代码行没有被测试用例覆盖到。")])])])}),[],!1,null,null,null);_.default=s.exports}}]);